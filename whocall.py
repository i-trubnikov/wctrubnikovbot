import logging
import time
from aiogram import Bot, Dispatcher, types, executor
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

TOKEN = '7710767802:AAFFRYTh4Ovbr845FNm00rIvLAdxNbbe_ME'
CHROME_DRIVER_PATH = '/Users/ilatrubnikov/Downloads/chromedriver-mac-arm64/chromedriver'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

def check_text_selenium(phone):
    url = f"https://www.tbank.ru/oleg/who-called/info/{phone}/"
    try:
        options = Options()
        options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")

        service = Service(CHROME_DRIVER_PATH)
        driver = webdriver.Chrome(service=service, options=options)
        driver.get(url)

        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        page_text = driver.page_source
        driver.quit()

        if "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç" in page_text:
            return "‚úÖ –ù–æ–º–µ—Ä —á–∏—Å—Ç—ã–π"
        elif (
            "–∂–∞–ª–æ–±–∞" in page_text or
            "–Ω–µ–≥–∞—Ç–∏–≤" in page_text or
            "–æ—Ü–µ–Ω–∫–∞" in page_text or
            "–Ω–∞–∑–≤–∞–Ω" in page_text or
            "–ü–æ –Ω–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä" in page_text
        ):
            return "‚ùå –ü–æ—Ä–∞ –±—ã –ø–æ–º–µ–Ω—è—Ç—å. –ù–æ–º–µ—Ä –≤ —Å–ø–∞–º–µ"
        else:
            return "‚ùî –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ –±–∞–∑–µ tbank.ru\n\n"
        "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "‚Äî –û—Ç–ø—Ä–∞–≤—å 1 –∏–ª–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –≤ —Å—Ç–æ–ª–±–∏–∫)\n"
        "‚Äî –ú–∞–∫—Å–∏–º—É–º 15 –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑\n"
        "‚Äî –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º\n\n"
        "üìã *–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:*\n"
        "`74951234567 74959876543`\n"
        "`79031234567,\n74950123456`\n\n"
        "–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ ‚Äî –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç, —á—Ç–æ –æ–Ω –≤ —Å–ø–∞–º–µ.\n"
        "–ï—Å–ª–∏ –≤—Å—ë —á–∏—Å—Ç–æ ‚Äî —Ç–æ–∂–µ —Å–æ–æ–±—â–∏—Ç ‚úÖ"
    )
    await message.reply(text, parse_mode='Markdown')

@dp.message_handler()
async def handle_message(message: types.Message):
    raw_text = message.text.replace(',', ' ').replace('\n', ' ')
    numbers = list(filter(None, [num.strip() for num in raw_text.split()]))

    if not numbers:
        await message.reply("üì≠ –ù–µ –≤–∏–∂—É –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return

    if len(numbers) > 15:
        await message.reply("‚ö†Ô∏è –ù–µ –±–æ–ª—å—à–µ 15 –Ω–æ–º–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
        return

    temp_msg = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é... –≠—Ç–æ –∑–∞–π–º—ë—Ç —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –±—É–¥–µ—Ç —Ç–æ—á–Ω–µ–µ")

    results = []
    spam_numbers = []

    for idx, number in enumerate(numbers, 1):
        result = check_text_selenium(number)
        results.append(f"{idx}. {number} ‚Äî {result}")
        if "‚ùå –ü–æ—Ä–∞ –±—ã –ø–æ–º–µ–Ω—è—Ç—å" in result:
            spam_numbers.append(number)
        time.sleep(1.5)

    await temp_msg.delete()

    with open("results.txt", "w", encoding="utf-8") as f:
        f.write('\n'.join(results))
        f.write('\n\nüìõ –ù–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Å–ø–∞–º–µ:\n')
        if spam_numbers:
            f.write('\n'.join(spam_numbers))
        else:
            f.write('–í—Å–µ –Ω–æ–º–µ—Ä–∞ —á–∏—Å—Ç—ã–µ ‚úÖ')

    await message.reply_document(open("results.txt", "rb"), caption="üìÑ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏.")

if __name__ == '__main__':
    executor.start_polling(dp)
